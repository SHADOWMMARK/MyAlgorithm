##finding peaks in a list: peak means strictly greater than its neighbors.
the first idea is go through the whole list with keeping track of "pre", "cur", and "next"
caution that may occur some special condition that needs to include. ##

class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        pre = 0
        nex = 2
        cur = 1
        
        if len(nums)==1: return 0
        if nums[0]>nums[1]: return 0     
        if nums[-1]>nums[-2]:
            return len(nums)-1
            
        for i in range(len(nums)-1):
            if nums[cur]>nums[pre] and nums[cur]>nums[nex]:
                return cur
            pre += 1
            nex += 1
            cur += 1
            
The second algorithm I come up is using the dichotomyï¼š
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        l,r = 0,len(nums)-1

        if len(nums)==1: return 0
        if nums[0]>nums[1]: return 0     
        if nums[-1]>nums[-2]:return r

        while l<=r:
            mid = l+((r-l)>>1)
            if nums[mid] > nums[mid-1] and nums[mid] > nums[mid+1]:
                return mid
            if nums[mid] <= nums[mid+1]:
                l = mid + 1
            else:
                r = mid - 1              
        return -1
