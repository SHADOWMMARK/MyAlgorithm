A password is considered strong if the below conditions are all met:

It has at least 6 characters and at most 20 characters.
It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
It does not contain three repeating characters in a row (i.e., "...aaa..." is weak, but "...aa...a..." is strong, assuming other conditions are met).
Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.

In one step, you can:
  Insert one character to password,
  Delete one character from password, or
  Replace one character of password with another character.


peperation knowledge:
##
  str.isupper(): if the str all uppercase then return true
  str.islower(): if the str have uppercase then return false
  if the str having at least one uppercase and one lowercase: str.isupper() == False and str.islower() == False
##  
  any(chr.isdigit() for chr in str) : if the str has at least one digit this will return true
##
  write a method that return how many chrs are in the str if they are 3 and more continuous
  def isContinue(str):
    n = len(str)
    k = 1
    all = []
    for i in range(n-1):
        if str[i]==str[i+1]:
            k+=1
        else:
            if k>=3:
                all.append(k)
            k = 1
    if k>=3:
        all.append(k)
    return all
  allc = isContinue(password)
##
  but using this{ if password.isupper()==False and password.islower()==False and any(chr.isdigit() for chr in password)==True and not allc:} 
  to judge if the str is satisfied is not actually suitable.
  can set a cnt to count the types of chrs in the str!
  #CODE:
  m = 0
  if any(chrs.isupper() for chrs in password)==True:
      m+=1
  if any(chrs.islower() for chrs in password)==True:
      m+=1
  if any(chrs.isdigit() for chrs in password)==True:
      m+=1
  now we got how many types in the password
  
  then we discuss the length of the password:(n = len(password))
  if n < 6:
      return max(6−n,3−m) #because when length is less then 6 the operation of Replace and Delete is not worth than Insert,
                            even if there are continous chr we can use at most 1 Insert to get rid of it so here we need not to consider this situation.
                            
  if 6<=n and 6<=20:   #here think about the operations of Insert and Delete, those two kinds operation only changing the continuity, so we can use replace doing
                        the same work with more efficiency because it can also change the m (the types of the chrs in password)
      g = 0
      for item in allc:   #allc recorded all times of the continous chrs
          g += int(item/3)
      return max(g,3-m)
      
  if n>20:          #here only useful operations is Delete and Replace, but here is the trick: every three times of Delete Operations can do one operation
                     of Replace Operation's work, but should consider the remainder of numbers in allc divided by 3. Those remainders can "offset" the use
                     of Delete operations when considering the work of delete transfering into replace operations work.
      tot = 0       #tot means the steps of Replace
      cnts = [0]*3
      for item in allc:
          tot += int(item/3)
          cnts[item%3]+=1
      base = n-20     #means the least number of Delete Operations number
      cur = base      #means the "effect" of the Delete Operations
      for i in range(3):
          if i==2:
              cnts[i]=tot
          if cnts[i]!=0 and cur!=0:
              t = min(cnts[i]*(i+1),cur)
              cur -= t    #every time use the "effect" of adding Replace Operations' work by Delete Operations will minus the "effect" of delete
              tot -= int(t/(i+1))
      return base+max(tot,3-m)
  
