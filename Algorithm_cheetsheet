s = collections.Counter(arr)
https://zhuanlan.zhihu.com/p/343747724

import collections
print(collections.__all__)
['deque', 'defaultdict', 'namedtuple', 'UserDict', 'UserList', 
'UserString', 'Counter', 'OrderedDict', 'ChainMap']

#get two list's intersection!
  def intersect(self, nums1, nums2):
      C = collections.Counter
      return list((C(nums1) & C(nums2)).elements())

  def intersect(self, nums1, nums2):
      return list((collections.Counter(nums1) & collections.Counter(nums2)).elements())
  #to sort the counter as the second's number disascending order
  cc=sorted(c.items(),key=lambda x:x[1],reverse=True)

#about the lambda function:
  #the function:
  def add(x,y):
    return x+y
    
  #can be translate into:
  lambda x,y:x+y
  Lambda functions differ from other Python methods because they can have only one expression,
  the line above does not return exactly the value x+y but the function that calculates x+y.
  lambda first variable second, colon third and statement last.
  
  #example with filter():
  the syntax of filter() in Python is filter(function, iterable)
  Original list: [1, 2, 3, 4, 6, 7, 8, 9, 10]
  Filtered list 1: [2, 4, 6, 8, 10]
  Filtered list 2: [1, 3, 5, 7, 9]
  nums = [1, 2, 3, 4, 6, 7, 8, 9, 10]
  even_nums = list(filter(lambda x:x%2==0,nums))
  
  #map() 
  List 1: [1, 2, ,3]
  List 2: [4, 5, 6]
  Result: [5, 7, 9]
  Note: the syntax of map() in Python is map(function, iterables)

#map(),filter(),functools.reduce():

  Syntax: map(func, *iterables)
● func is a function on which each element in iterables may be applied on
● * means there can be as many iterables as possible, where func has that exact number as required input arguments

  Syntax: filter(func, iterable)
● The func argument is required to return a boolean value
● Only one iterable is required
● filter passes each element in the iterable through func and returns only the ones that evaluate to true.

  Syntax: reduce(func, iterable[,initial])
● reduce applies a function of two arguments cumulatively to the elements of an iterable, optionally starting with an initial argument
● func is the function on which each element in the iterable gets cumulatively applied to
○ func requires two arguments
● initial is the optional value that gets placed before the elements of the iterable in the calculation, and serves as a default when the iterable is empty
○ If initial is supplied, it becomes the first argument to func and the first element in iterable becomes the second element
