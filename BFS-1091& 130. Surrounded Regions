There is actually a module in BFS, here is my thinking:

First we should have a queue structure.
then we considering the Boundary conditions.
Then add the start point into the queue, then renew the "visited".

while queue:
  get len(queue)
  for i in range(length):
    queue.popleft #get the first point in the queue
    is the point reach the end?
    then get all next level points
    throwing all not satisfied points away (such as out of boundary or visited)
    then put the new points into queue
 


Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

BFS's idea is that all possible answer develope together in all possible directions (in this problem) and the quickest will reach the end using least steps.

from collections import deque

class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if grid[0][0] != 0:
            return -1
        length = len(grid)
        if length == 1:
            return 1
        que = deque()
        visited = {}
        que.appendleft((0,0))
        visited[(0,0)] = True
        ans = 1
        while que:
            for _ in range(len(que)):
                i, j = que.pop()
                for pos_i, pos_j in [(-1,-1), (-1,0), (-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1)]:
                    new_i = i + pos_i
                    new_j = j + pos_j
                    if 0 <= new_i < length and 0 <= new_j < length and grid[new_i][new_j] == 0 and not visited.get((new_i, new_j)):
                        if new_i == length - 1 and new_j == length - 1:
                            return ans + 1
                        que.appendleft((new_i, new_j))
                        visited[(new_i, new_j)] = True
            ans += 1
        return -1


and another problem:
130. Surrounded Regions
Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionallyÂ surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.

my idea is find all "special O" that cannot be changed into "X", using the idea of BFS!! first construct a queue that
containing srounding "O", and all "O" nearby is special as well, then mark these positions then change all other positions' "O" into "X"!!

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        dircs = {(-1,0),(1,0),(0,1),(0,-1)}
        m , n = len(board), len(board[0])
        special = []
        visited = [[0]*n for _ in range(m)]
        for i in range(m):
            if board[i][0]=="O":
                special.append((i,0))
                visited[i][0]=1
            if board[i][n-1]=="O":
                special.append((i,n-1))
                visited[i][n-1]=1
        for i in range(n):
            if board[0][i]=="O":
                special.append((0,i))
                visited[0][i]=1
            if board[m-1][i]=="O":
                special.append((m-1,i))
                visited[m-1][i]=1
        while special:
            i, j = special.pop(0)
            for k,l in dircs:
                newi, newj = i + k, j + l
                if newi>0 and newi <m and newj > 0 and newj < n and board[newi][newj]=="O" and visited[newi][newj]!=1:
                    visited[newi][newj]=1
                    special.append((newi,newj))
        for i in range(m):
            for j in range(n):
                if board[i][j]=="O" and visited[i][j]!=1:
                    board[i][j]="X"
    
