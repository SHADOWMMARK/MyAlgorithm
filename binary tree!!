there mainly severl ways of go-over in the tree datastructure:
1. preorder: root -> left -> right
2. inorder: left -> root -> right
3. postorder: left -> right -> root
actually those three methods are belonged to DFS

for example: there is a tree like this:
       1
     2   3
   4  5   6
     7 8
by different kinds of traversal
the preorder result: 1 2 4 5 7 8 3 6
the inorder result: 4 2 7 5 8 1 3 6
the postorder result: 4 7 8 5 2 6 3 1

this is using recursion to write two kinds of traversal:

 def postorder(root):
     if root:
         postorder(root.left)
         postorder(root.right)
         temp.append(root.val)
         
 def inorder(root):
     if root:
         inorder(root.left)
         temp.append(root.val)
         inorder(root.right)
         
def preorder(root):
     if root:
         temp.append(root.val)
         preorder(root.right)
         preorder(root.left)
         
         
Binary Search Tree: left-son-node is always smaller than father-node, and right-son-node is always larger than the father-node.


##Convert a sorted array into an Binary Search Tree:
def sortedArrayToBST(nums: List[int]) -> Optional[TreeNode]:        
        if not nums:
            return None

        mid = len(nums)//2
        root = TreeNode(val=nums[mid]

        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid+1:])

        return root
