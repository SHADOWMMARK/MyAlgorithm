Here is some what is about mine thought in these algorithms:
while we know about recursion, but some time because it is top->down methods, that means in the rule of time it is not so efficient as down->top methods:
a little example of the dp al:
every one knows the  Fibonacci Number, here is my solution towards the leetcode prob 509:
class Solution:
    def fib(self, n: int) -> int:
        dp=[0]*n
        if n==1:
            return 1
        elif n==0:
            return 0
        dp[0],dp[1]=1,1
        for i in range(2,n):
            dp[i]=dp[i-1]+dp[i-2]
        return dp[n-1]

and here is a classical problem in leetcode:
198. House Robber
class Solution:
    def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
        dp = [0]*n
        dp[0] = nums[0]
        dp[1] = max(dp[0],nums[1])
        for i in range(2,n):
            dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        return dp[n-1]
        
And the other version of this problem:213. House Robber II:
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle.
That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
the solution is just to discuss two conditions: rob the first one or not. because there is a connection between the first and the last, so we cannot rob them both.
class Solution(object):
    def rob(self, nums):
        n = len(nums)
        if n == 0:
          return 0
        if n <= 2:
          return max(nums)
        # not to rob the first one
        dp1 = [0] * n
        dp1[0] = 0
        dp1[1] = nums[1]
        for i in range(2, n):
          dp1[i] = max(dp1[i-1],nums[i] + dp1[i-2])

        # not to rob the last one
        dp2 = [0] * n
        dp2[0] = nums[0]
        dp2[1] = max(nums[0],nums[1])
        for i in range(2, n-1):
          dp2[i] = max(dp2[i-1],nums[i] + dp2[i-2])
        return max(dp1[n-1],dp2[n-2])
        
740. Delete and Earn
You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:
Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.

Actually this problem can be convert into those two probs above, only by change the nums to another sequence list then it will help us a lot.

class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        nums.sort()
        numsap = []
        i = 0
        while i<len(nums):
            temp = nums.count(nums[i])
            numsap.append(temp)
            i+=temp
        n = len(numsap)
        dp = [0]*n
        dp[0] = nums[0]*numsap[0]
        if n == 1:
            return dp[0]
        k = numsap[0]
        if nums[k] ==  nums[0]+1:
            dp[1] = max(dp[0],nums[k]*numsap[1])
        else:
            dp[1] = dp[0]+nums[k]*numsap[1]
        i,t = 2,numsap[0]
        k = numsap[0]+numsap[1]
        while i < n:
            if nums[k] == nums[t] + 1:
                dp[i] = max(dp[i-1],dp[i-2]+nums[k]*numsap[i])
            else:
                dp[i] = dp[i-1]+nums[k]*numsap[i]
            t += numsap[i-1]
            k += numsap[i]
            i += 1
        return dp[n-1]


2/17 HERE IS SOME IMPORTANT IDEA about the dynamic programming:
It is about the aftereffect, the dp method always requiring none aftereffect.
Below is an example:
53. Maximum Subarray:
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
A subarray is a contiguous part of an array.
#First I thought about the sliding windows but the time is run out. Then we considering these kind of problem, it tell us to return the sum, but not exact the list,
which gives us more probability of this being a dp problem and notice that this is not subsequence but it is the max continuous sublist sum.
here is the example list nums =  [-2,1,-3,4,-1,2,1,-5,4]
the core idea is to set the dp problem to many small subproblem, but if we set the dp[1] as the problem that the max list sum containing nums[1] we got plenty probability:
[-2,1,-3,4] 1 is the second of the sublist and it can be the first entry of the sublist, so it is hard to get the sub prob done.
Then we change the sub prob: the max continuous sublist sum as nums[i] as the last entry of the sublist, this problem we do not need to consider the entries after the element,
so the solutions to those sub prob such as dp[0] = -2, dp[1]=max(dp[0]+nums[1],nums[1])

#attention: we got here the dp[n-1] is not the best ans, but the max(dp) which is the max of all subprob is the ans.

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        dp = [0] * len(nums)
        dp[0] = nums[0]

        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1] + nums[i], nums[i]) #状态转移公式

        return max(dp)
